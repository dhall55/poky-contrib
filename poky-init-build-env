#!/bin/sh

# Poky Build Enviroment Setup Script
#
# Copyright (C) 2006-2007 OpenedHand Ltd.
# Copyright (C) 2010 Wind River Systems
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#
# Normally this is called as '. ./poky-init-buildenv builddir'
#
# This works in most shells (not dash), but not all of them pass arg1 when
# being sourced.   To workaround the shell limitation use "set arg1" prior 
# to sourcing this script.
#
# zsh also has some irregularities in how it passed arg0
#

# Identify the shell...
expr "$version" : '.*csh.*' > /dev/null && set CSH=csh || SH=sh

# If in csh, blank out all variables we might use...
[ -n "$CSH" ] && set SH=''
[ -n "$CSH" ] && set BASH_SOURCE=''
[ -n "$CSH" ] && set ZSH_VERSION=''
[ -n "$CSH" ] && set SRC_ERR=''

# Identify if we were executed...
# SH specific
[ -z "$SRC_ERR" -a -n "$SH" -a -z "$ZSH_VERSION" ] && expr "$0" : '.*poky-init-build-env' > /dev/null && SRC_ERR="not_sourced"
# ZSH specific
[ -z "$SRC_ERR" -a -n "$SH" -a -n "$ZSH_VERSION" -a "$0" != "poky-init-build-env" ] && SRC_ERR="not_sourced"
# CSH specific
[ -z "$SRC_ERR" -a -n "$CSH" ] && expr "$0" : '.*poky-init-build-env' > /dev/null && set SRC_ERR="not_sourced"

### Define OEROOT
# Default to pwd...
# Check to see if BASH_SOURCE is set, and use it...
# Canonicalize the path...
[ -n "$SH"  ] && export OEROOT=`pwd`
[ -n "$CSH" ] && setenv OEROOT `pwd`

[ -n "$SH"  -a -n "$BASH_SOURCE" ] && export OEROOT=`dirname $BASH_SOURCE`

[ -n "$SH"  ] && export OEROOT=`readlink -e $OEROOT`
[ -n "$CSH" ] && setenv OEROOT `readlink -e $OEROOT`

### Source the variables...

[ -z "$SRC_ERR" -a -n "$SH"  -a -z "$OEROOT" ] && SRC_ERR="scripts"
[ -z "$SRC_ERR" -a -n "$CSH" -a -z "$OEROOT" ] && set SRC_ERR="scripts"

[ -z "$SRC_ERR" -a -n "$SH"  -a ! -d "$OEROOT/scripts" ] && SRC_ERR="scripts"
[ -z "$SRC_ERR" -a -n "$CSH" -a ! -d "$OEROOT/scripts" ] && set SRC_ERR="scripts"

[ -z "$SRC_ERR" -a -n "$SH"  ] && . $OEROOT/scripts/poky-env-internal
[ -z "$SRC_ERR" -a -n "$CSH" ] && source $OEROOT/scripts/poky-env-internal

### Setup and display build directory

[ -z "$SRC_ERR" ] && $OEROOT/scripts/poky-setup-builddir && cd $BUILDDIR

[ -z "$SRC_ERR" -a -n "$SH"  ] && unset OEROOT
[ -z "$SRC_ERR" -a -n "$CSH" ] && unsetenv OEROOT

### Display error messages (if we errored)

[ "$SRC_ERR" = "not_sourced" ] && echo "Error: This script needs to be sourced.  For example:"
[ "$SRC_ERR" = "not_sourced" ] && echo "        POSIX shell: . ./poky-init-build-env"
[ "$SRC_ERR" = "not_sourced" ] && echo "          csh shell: source ./poky-init-build-env"

[ "$SRC_ERR" = "scripts" ]     && echo "Error: Unable to find scripts directory.  This script must be sourced from"
[ "$SRC_ERR" = "scripts" ]     && echo "       within the poky directory."

[ -n "$SRC_ERR" ]              && echo

[ -n "$CSH" ] && unset BASH_SOURCE
[ -n "$CSH" ] && unset ZSH_VERSION
unset SRC_ERR
unset CSH
unset SH

