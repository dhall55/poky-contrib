<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<chapter id='dev-manual-model'>

<title>Common Development Models</title>

<para>
    Many development models exist for which you can use the Yocto Project. 
    However, for the purposes of this manual we are going to focus on two common ones:  
    System Development and User Application Development.  
    System Development covers Board Support Package (BSP) development and kernel modification.  
    User Application Development covers development of applications that you intend to run on some 
    target hardware.  
</para>

<para>
    This chapter presents overviews of both system and application models.
    If you want to reference specific examples of these development models, 
    see <xref linkend='dev-manual-bsp-appendix'>BSP Development Example</xref> and 
    <xref linkend='dev-manual-kernel-appendix'>Kernel Modification Example</xref>.
</para>

<section id='system-development-model'>
    <title>System Development</title>

    <para>
        System development involves modification or creation of an image that you want to run on 
        a specific hardware target.  
        Usually when you want to create an image that runs on embedded hardware the image does 
        not require the same amount of features that a full-fledged Linux distribution provides.  
        Thus, you can create a much smaller image that is designed to just use the hardware 
        features for your particular hardware.
    </para>

    <para>
        To help you understand how system development works in the Yocto Project, this section 
        covers two types of image development:  BSP creation and kernel modification
        (see <xref linkend='kernel-spot'></xref>).
    </para>

    <section id='developing-a-board-support-package-bsp'>
        <title>Developing a Board Support Package (BSP)</title>

        <para>
            A BSP is a package of recipes that when applied during a build results in 
            an image you can run on a particular board.  
            Thus, the package, when compiled into the new image, supports the operation of the board.  
        </para>

        <note>
            For a brief list of terms used when describing the development process in the Yocto Project, 
            see <xref linkend='yocto-project-terms'>Yocto Project Terms</xref> in this manual.
        </note>

        <para>
            The remainder of this section presents the basic steps to create a BSP basing it on an 
            existing BSP that ships with the Yocto Project.
            You can reference <xref linkend='dev-manual-bsp-appendix'>BSP Development Example</xref>
            for a detailed example that uses the Crown Bay BSP as a base BSP from which to start.
        </para>

        <para>
            This illustration and the following list summarizes the BSP creation general workflow.
        </para>

        <para>
            <imagedata fileref="figures/bsp-dev-flow.png" width="6in" depth="7in" align="center" scalefit="1" />
        </para>

        <para>
            <orderedlist>
                <listitem><para><emphasis>Set up your host development system to support 
                    development using the Yocto Project</emphasis>:  See  
                    <ulink url='http://www.yoctoproject.org/docs/1.1/yocto-project-qs/yocto-project-qs.html#the-linux-distro'>
                    The Linux Distributions</ulink> section and  
                    <ulink url='http://www.yoctoproject.org/docs/1.1/yocto-project-qs/yocto-project-qs.html#packages'>
                    The Packages</ulink> section both
                    in the Yocto Project Quick Start for requirements.</para></listitem>
                <listitem><para><emphasis>Establish a local copy of the Yocto Project files on your 
                    system</emphasis>:  You need to have the Yocto Project files available on your host system. 
                    Having the Yocto Project files on your system gives you access to the build
                    process and tools you need.
                    For information on how to get these files, see the
                    <xref linkend='getting-setup'>Getting Setup</xref> section in this manual.</para></listitem>
                <listitem><para><emphasis>Establish a local copy of the base BSP files</emphasis>:  Having    
                    the BSP files on your system gives you access to the build
                    process and tools you need.
                    For information on how to get these files, see 
                    <xref linkend='getting-setup'>Getting Setup</xref> earlier in this manual.</para></listitem>    
                <listitem><para><emphasis>Choose a Yocto Project-supported BSP as your base BSP</emphasis>:  
                    The Yocto Project ships with several BSPs that support various hardware.  
                    It is best to base your new BSP on an existing BSP rather than create all the 
                    recipes and configuration files from scratch.  
                    While it is possible to create everything from scratch, basing your new BSP 
                    on something that is close is much easier.  
                    Or, at a minimum, it gives you some structure with which to start.</para>
                    <para>At this point you need to understand your target hardware well enough to determine which 
                    existing BSP it most closely matches.  
                    Things to consider are your hardware’s on-board features such as CPU type and graphics support.  
                    You should look at the README files for supported BSPs to get an idea of which one 
                    you could use.  
                    A generic Atom-based BSP to consider is the Crown Bay that does not support
                    the Intel® Embedded Media Graphics Driver (EMGD).  
                    The remainder of this example uses that base BSP.</para>
                    <para>To see the supported BSPs, go to the Yocto Project
                    <ulink url='http://www.yoctoproject.org/download'>download page</ulink> and click 
                    on “BSP Downloads.”</para></listitem>
                <listitem><para><emphasis>Create your own BSP layer</emphasis>:  Layers are ideal for 
                    isolating and storing work for a given piece of hardware.  
                    A layer is really just a location or area in which you place the recipes for your BSP.  
                    In fact, a BSP is, in itself, a special type of layer.   
                    Consider an application as another example that illustrates a layer.  
                    Suppose you are creating an application that has library or other dependencies in 
                    order for it to compile and run.  
                    The layer, in this case, would be where all the recipes that define those dependencies 
                    are kept.  The key point for a layer is that it is an isolated area that contains 
                    all the relevant information for the project that the Yocto Project build 
                    system knows about.</para>
                    <note>The Yocto Project supports four BSPs that are part of the 
                    Yocto Project release: <filename>atom-pc</filename>, <filename>beagleboard</filename>,
                    <filename>mpc8315e</filename>, and <filename>routerstationpro</filename>.  
                    The recipes and configurations for these four BSPs are located and dispersed 
                    within local Yocto Project files.
                    Consequently, they are not totally isolated in the spirit of layers unless you think 
                    of <filename>meta-yocto</filename> as a layer itself.  
                    On the other hand, BSP layers for Crown Bay, Emenlow, Jasper Forest, 
                    N450, and Sugar Bay are isolated.</note>
                    <para>When you set up a layer for a new BSP you should follow a standard layout.  
                    This layout is described in the
                    <ulink url='http://www.yoctoproject.org/docs/1.1/bsp-guide/bsp-guide.html#bsp-filelayout'>
                    Example Filesystem Layout</ulink> section of the Board Support Package (BSP) Development
                    Guide.  
                    In the standard layout you will notice a suggested structure for recipes and  
                    configuration information.  
                    You can see the standard layout for the Crown Bay BSP in this example by examining the 
                    directory structure of the <filename>meta-crownbay</filename> layer inside the 
                    local Yocto Project files.</para></listitem>
                <listitem><para><emphasis>Make configuration changes to your new BSP 
                    layer</emphasis>:  The standard BSP layer structure organizes the files you need to edit in 
                    <filename>conf</filename> and several <filename>recipes-*</filename> within the 
                    BSP layer.
                    Configuration changes identify where your new layer is on the local system
                    and identify which kernel you are going to use.
                    </para></listitem>
                <listitem><para><emphasis>Make recipe changes to your new BSP layer</emphasis>:  Recipe 
                    changes include altering recipes (<filename>.bb</filename> files), removing 
                    recipes you don't use, and adding new recipes that you need to support your hardware.
                    </para></listitem>
                <listitem><para><emphasis>Prepare for the build</emphasis>:  Once you have made all the 
                    changes to your BSP layer there remains a few things 
                    you need to do for the Yocto Project build system in order for it to create your image.  
                    You need to get the build environment ready by sourcing an environment setup script 
                    and you need to be sure two key configuration files are configured appropriately.</para>
                    <para>The entire process for building an image is overviewed in the 
                    <ulink url='http://www.yoctoproject.org/docs/1.1/yocto-project-qs/yocto-project-qs.html#building-image'>
                    Building an Image</ulink> section of the Yocto Project Quick Start.    
                    You might want to reference this information.</para></listitem>
                <listitem><para><emphasis>Build the image</emphasis>:  The Yocto Project uses the BitBake 
                    tool to build images based on the type of image you want to create.  
                    You can find more information on BitBake 
                    <ulink url='http://bitbake.berlios.de/manual/'>here</ulink>.</para>
                    <para>The build process supports several types of images to satisfy different needs.  
                    See 
                    <ulink url='http://www.yoctoproject.org/docs/1.1/poky-ref-manual/poky-ref-manual.html#ref-images'>
                    Reference: Images</ulink> in the 
                    <ulink url='http://www.yoctoproject.org/docs/1.1/poky-ref-manual/poky-ref-manual.html'>
                    Yocto Project Reference Manual</ulink>for information on supported images.</para></listitem>
            </orderedlist>
        </para>

        <para>
            You can view a video presentation on "Building Custom Embedded Images with Yocto"
            at <ulink url='http://free-electrons.com/blog/elc-2011-videos'>Free Electrons</ulink>.  
            You can also find supplemental information in the 
            <ulink url='http://yoctoproject.org/docs/1.1/bsp-guide/bsp-guide.html'>
            Board Support Package (BSP) Development Guide</ulink>.
            Finally, there is wiki page write up of the example located 
            <ulink url='https://wiki.yoctoproject.org/wiki/Transcript:_creating_one_generic_Atom_BSP_from_another'>
            here</ulink> you might find helpful.
       </para>
    </section>

    <section id='modifying-the-kernel'>
        <title><anchor id='kernel-spot' />Modifying the Kernel</title>

        <para>
            Kernel modification involves changing the Linux Yocto kernel, which could involve changing
            configuration variables as well as adding new kernel recipes.  
            Configuration changes can be added in the form of configuration fragments, while recipe
            modification comes through the kernel's <filename>recipes-kernel</filename> area
            in a kernel layer you create.
        </para>

        <para>
            The remainder of this section presents a high-level overview of the Linux Yocto 
            kernel architecture and the steps to modify the Linux Yocto kernel.
            For a complete discussion of the kernel, see the 
            <ulink url='http://www.yoctoproject.org/docs/1.1/kernel-manual/kernel-manual.html'>
            Yocto Project Kernel Architecture and Use Manual</ulink>.
            You can reference <xref linkend='dev-manual-kernel-appendix'>Kernel Modification Example</xref>
            for a detailed example that changes the configuration of a kernel.
        </para>

        <section id='kernel-overview'>
            <title>Kernel Overview</title>

            <para>
                When one thinks of the source files for a kernel they usually think of a fixed structure 
                of files that contain kernel patches.
                The Yocto Project, however, employs mechanisims that in a sense result in a kernel source
                generator.
            </para>

            <para>
                The Yocto Project uses the source code management (SCM) tool Git to manage and track Yocto 
                Project files.
                Git employs branching strategies that effectively produce a tree-like structure whose 
                branches represent diversions from more general code. 
                For example, suppose two kernels are basically identical with the exception of a couple
                different features in each.
                In the Yocto Project source repositories managed by Git a main branch can contain the 
                common or shared
                parts of the kernel source and two branches that diverge from that common branch can 
                each contain the features specific to the respective kernel.
                The result is a managed tree whose "leaves" represent the end of a specific path that yields
                a set of kernel source files necessary for a specific piece of hardware and its features.
            </para>
         
            <para>
                A big advantage to this scheme is the sharing of common features by keeping them in 
                "larger" branches that are further up the tree.  
                This practice eliminates redundant storage of similar features shared among kernels.
            </para>

            <para>
                When you build the kernel on your development system all files needed for the build
                are taken from the Yocto Project source repositories pointed to by the 
                <filename>SRC_URI</filename> variable and gathered in a temporary work area
                where they are subsequently used to create the unique kernel.
                Thus, in a sense, the process constructs a local source tree specific to your 
                kernel to generate the new kernel image - a source generator if you will.
            </para>

            <para>  
                You can find a web interface to the Yocto Project source repository at 
                <ulink url='http://git.yoctoproject.org/'></ulink>.  
                Within the interface you will see groups of related source code, each of which can 
                be cloned using Git to result in a working Git repository on your local system 
                (referred to as the "local Yocto Project files" in this manual).
            </para>

            <para>
                The Yocto Project supports four types of kernels in its source repositories at 
                <ulink url='http://git.yoctoproject.org/'></ulink>:
                <itemizedlist>
                    <listitem><para><emphasis><filename>linux-yocto-2.6.34</filename></emphasis> - The 
                    stable Linux Yocto kernel that is based on the Linux 2.6.34 release.</para></listitem>
                    <listitem><para><emphasis><filename>linux-yocto-2.6.37</filename></emphasis> - The
                    stable Linux Yocto kernel that is based on the Linux 2.6.37 release.</para></listitem>
                    <listitem><para><emphasis><filename>linux-yocto-3.0</filename></emphasis> - The current
                    Linux Yocto kernel that is based on the Linux 3.0 release.</para></listitem>
                    <listitem><para><emphasis><filename>linux-yocto-dev</filename></emphasis> - A development
                    kernel based on the latest upstream release candidate available.</para></listitem>
                    <listitem><para><emphasis><filename>linux-2.6</filename></emphasis> - A kernel based on 
                    minimal Linux mainline tracking.
                    You can find the <filename>.bbappend</filename> for this kernel in the 
                    <filename>meta-kernel-dev</filename> Git repository.</para></listitem>
                </itemizedlist>
            </para>

            <para>
                For a complete discussion of the Yocto Project kernel's architcture and its branching strategy,
                see the <ulink url='http://www.yoctoproject.org/docs/1.1/kernel-manual/kernel-manual.html'>
                The Yocto Project Kernel Architecture and Use Manual</ulink>.
            </para>
        </section> 

        <section id='kernel-modification-workflow'>
            <title>Kernel Modification Workflow</title>

            <para>
                This illustration and the following list summarizes the kernel modification general workflow.
            </para>

            <para>
                <imagedata fileref="figures/kernel-dev-flow.png" width="6in" depth="7in" align="center" scalefit="1" />
            </para> 

            <para>
                <orderedlist>
                    <listitem><para><emphasis>Set up your host development system to support 
                        development using the Yocto Project</emphasis>:  See  
                        <ulink url='http://www.yoctoproject.org/docs/1.1/yocto-project-qs/yocto-project-qs.html#the-linux-distro'>
                        The Linux Distributions</ulink> section and  
                        <ulink url='http://www.yoctoproject.org/docs/1.1/yocto-project-qs/yocto-project-qs.html#packages'>
                        The Packages</ulink> section both
                        in the Yocto Project Quick Start for requirements.</para></listitem>
                    <listitem><para><emphasis>Establish a local copy of the Yocto Project files on your 
                        system</emphasis>:  Having the Yocto Project files on your system gives you access to 
                        the build process and tools you need.
                        For information on how to get these files, see the bulleted item
                        <link linkend='local-yp-release'>Yocto Project Release</link> in  
                        <xref linkend='getting-setup'>Getting Setup</xref> earlier in this manual.
                        </para></listitem>
                    <listitem><para><emphasis>Set up the <filename>poky-extras</filename> Git 
                        repository</emphasis>:  This repository is the area for your configuration 
                        fragments, new kernel recipes, and the kernel <filename>.bbappend</filename>
                        file used during the build. 
                        It is good practice to set this repository up inside the local Yocto
                        Project files Git repository.
                        For information on how to get these files, see the bulleted item
                        <link linkend='poky-extras-repo'>The 
                        <filename>poky-extras</filename> Git Repository</link> in
                        <xref linkend='getting-setup'>Getting Setup</xref> earlier in this manual.
                        </para></listitem>
                    <listitem><para><emphasis>Establish a local copy of the Linux Yocto kernel files on your 
                        system</emphasis>:  In order to make modifications to the kernel you need two things:
                        a bare clone of the Linux Yocto kernel you are modifying and a copy of that 
                        bare clone. 
                        The bare clone is required by the build process and is the area to which you 
                        push your kernel source changes. 
                        The copy of the bare clone is a local Git repository that contains all the kernel's 
                        source files. 
                        You make your changes to the files in this copy of the bare clone.
                        For information on how to set these two items up, see the bulleted item
                        <link linkend='local-kernel-files'>Linux Yocto Kernel</link> in  
                        <xref linkend='getting-setup'>Getting Setup</xref> earlier in this manual.
                        </para></listitem>
                    <listitem><para><emphasis>Make changes to the kernel source code if 
                        applicable</emphasis>:  Modifying the kernel does not always mean directly
                        changing source files. 
                        However, if you have to do this then you make the changes in the local 
                        Git repository you set up to hold the source files (i.e. the copy of the 
                        bare clone).
                        Once the changes are made you need to use Git commands to commit the changes
                        and then push them to the bare clone.</para></listitem>                      
                    <listitem><para><emphasis>Make kernel configuration changes
                        to your local kernel layer if applicable</emphasis>:  
                        If your situation calls for changing the kernel's configuration you can 
                        use <filename>menuconfig</filename>
                        to enable and disable kernel configurations.  
                        Using <filename>menuconfig</filename> allows you to develop and test the 
                        configuration changes you are making to the kernel.</para></listitem>                      
                    <listitem><para><emphasis>Add new kernel recipes if applicable</emphasis>:  The standard 
                        layer structure organizes recipe files inside the 
                        <filename>meta-kernel-dev</filename> layer that is within the 
                        <filename>poky-extras</filename> Git repository.
                        If you need to add new kernel recipes you add them within this layer. 
                        Also within this area you will find the <filename>.bbappend</filename> 
                        file that appends information to the kernel's recipe file used during the 
                        build.
                        </para></listitem>
                    <listitem><para><emphasis>Prepare for the build</emphasis>:  Once you have made all the 
                        changes to your kernel (configurations, source code changes, recipe additions, 
                        or recipe changes) there remains a few things 
                        you need to do for the Yocto Project build system in order for it to create your image.  
                        If you have not done so you need to get the build environment ready by sourcing 
                        the environment setup script described earlier.
                        You also need to be sure two key configuration files are configured appropriately.</para>
                        <para>The entire process for building an image is overviewed in the 
                        <ulink url='http://www.yoctoproject.org/docs/1.1/yocto-project-qs/yocto-project-qs.html#building-image'>
                        Building an Image</ulink> section of the Yocto Project Quick Start.    
                        You might want to reference this information.
                        Also, you should look at the detailed examples found in the appendices at 
                        end of this manual.</para></listitem>
                    <listitem><para><emphasis>Build the image</emphasis>:  The Yocto Project uses the BitBake 
                        tool to build images based on the type of image you want to create.  
                        You can find more information on BitBake 
                        <ulink url='http://bitbake.berlios.de/manual/'>here</ulink>.</para>
                        <para>The build process supports several types of images to satisfy different needs.  
                        See 
                        <ulink url='http://www.yoctoproject.org/docs/1.1/poky-ref-manual/poky-ref-manual.html#ref-images'>
                        Reference: Images</ulink> in the 
                        <ulink url='http://www.yoctoproject.org/docs/1.1/poky-ref-manual/poky-ref-manual.html'>
                        Yocto Project Reference Manual</ulink> for information on supported 
                        images.</para></listitem>
                    <listitem><para><emphasis>Make your configuration changes available
                        in the kernel layer</emphasis>:  Up to this point all the configuration changes to the 
                        kernel have been done and tested iteratively.  
                        Once they are tested and ready to go you can move them into the kernel layer, 
                        which allows you to distribute the layer.
                        [WRITER'S NOTE:  Not sure if the layer is meta-kernel-dev or if it would be 
                        a new layer copied from the work done there.]</para></listitem>
                    <listitem><para><emphasis>Push your configuration and recipe changes upstream to the 
                        linux Yocto Git repository (in-tree changes)</emphasis>:  If the changes you made
                        are suited for all Linux Yocto users you might want to push the changes up into 
                        the Linux Yocto Git repository so that they become part of the kernel tree
                        and available to everyone using the kernel.</para></listitem> 
                </orderedlist>
            </para>
        </section>
    </section>
</section>

<section id='place-holder-section-two'>
    <title>Place-Holder Section For Application Development</title>

    <para>
        Text needed here.
    </para>
</section>

</chapter>
<!--
vim: expandtab tw=80 ts=4
-->
