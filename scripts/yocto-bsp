#!/usr/bin/env python
# ex:ts=4:sw=4:sts=4:et
# -*- tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*-
#
# Copyright 2012 Intel Corporation
# Authored-by:  Tom Zanussi <tom.zanussi@intel.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

__version__ = "0.1.0"

import os
import sys
import optparse
import logging

scripts_path = os.path.abspath(os.path.dirname(os.path.abspath(sys.argv[0])))
lib_path = scripts_path + '/lib'
sys.path = sys.path + [lib_path]

from bsp.help import *
from bsp.engine import *


def yocto_bsp_create_subcommand(args, usage_str):
    """
    Command-line handling for BSP creation.  The real work is done by
    bsp.engine.yocto_bsp_create()
    """
    parser = optparse.OptionParser(usage = usage_str)

    parser.add_option("-o", "--outdir", dest = "outdir", action = "store",
                      help = "name of BSP dir to create")
    parser.add_option("-c", "--codedump", dest = "codedump", action = "store_true",
                      default = False, help = "dump the generated code to bspgen.out")
    parser.add_option("-p", "--property", dest = "todo", action = "store_true", 
                      default = False, help = "specify the value for a BSP property")
    parser.add_option("-t", "--test", dest = "test", action = "store_true",
                      default = False, help = "use test properties instead of prompting")
    (options, args) = parser.parse_args(args)

    if len(args) != 2:
        logging.error("Wrong number of arguments, exiting\n")
        parser.print_help()
        exit(1)

    machine = args[0]
    karch = args[1]

    if options.outdir:
        bsp_output_dir = options.outdir
    else:
        bsp_output_dir = "meta-" + machine

    if options.test:
        Line.optional_input = test_bsp_properties
    elif bsp_properties:
        Line.optional_input = bsp_properties

    yocto_bsp_create(machine, karch, scripts_path, bsp_output_dir, options.codedump)


def yocto_bsp_list_subcommand(args, usage_str):
    """
    Command-line handling for listing available BSP properties and
    values.  The real work is done by bsp.engine.yocto_bsp_list()
    """
    parser = optparse.OptionParser(usage = usage_str)

    parser.add_option("-p", "--property", help = "specify the value for a BSP property",
               action = "store_true", dest = "testjunk", default = False)

    (options, args) = parser.parse_args(args)

    if not yocto_bsp_list(args, scripts_path):
        logging.error("Bad list arguments, exiting\n")
        parser.print_help()
        exit(1)


subcommands = {
    "create": [yocto_bsp_create_subcommand,
               yocto_bsp_create_usage,
               yocto_bsp_create_help],
    "list":   [yocto_bsp_list_subcommand,
               yocto_bsp_list_usage,
               yocto_bsp_list_help],
}


def start_logging(loglevel):
    logging.basicConfig(filname = 'yocto-bsp.log', filemode = 'w', level=loglevel)


def main():
    parser = optparse.OptionParser(version = "yocto-bsp version %s" % __version__,
                                   usage = yocto_bsp_usage)

    parser.disable_interspersed_args()
    parser.add_option("-D", "--debug", dest = "debug", action = "store_true",
                      default = False, help = "output debug information")

    (options, args) = parser.parse_args()

    loglevel = logging.INFO
    if options.debug:
        loglevel = logging.DEBUG
    start_logging(loglevel)

    invoke_subcommand(args, parser, yocto_bsp_help_usage, subcommands)


bsp_properties = None

if __name__ == "__main__":
    try:
        ret = main()
    except Exception:
        ret = 1
        import traceback
        traceback.print_exc(5)
    sys.exit(ret)

