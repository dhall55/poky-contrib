#!/bin/sh
# Yocto Automated Build Server Post Processing Script
#
# Copyright (C) 2009 Intel
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

STATUS=$1
ABTARGET=$2
TARGETDIR=$3

if [ "z$STATUS" != "zcomplete" ]; then
    exit 0
fi

cd ./build/tmp/deploy/

#
# Work out a destination path which includes the date and an incremental 
# revision number
#
DEST=$TARGETDIR/$ABTARGET/
BASE=`date +%Y%m%d`
REV=1

while [ -d "$DEST$FOO$BASE-$REV" ]
do
    REV=`expr $REV + 1`
done

DEST="$DEST$FOO$BASE-$REV"
mkdir -p $DEST

COMPRESS_FILES=()
FILES=()

#
# For each builder target, create a list of files to share (FILES) and files 
# to share compressed (COMPRESS_FILES)
#
if [[ "x$ABTARGET" = "xgenerate-release" || "x$ABTARGET" = "xnightly" || "x$ABTARGET" = "xmilestone" ]]; then
    COMPRESS_FILES=(
    )

    FILES=(
        gitinfo
        `readlink images/bzImage-qemux86.bin`
        `readlink images/zImage-qemuarm.bin`
        `readlink images/vmlinux-qemumips.bin`
        `readlink images/zImage-qemuppc.bin`
        modules-*.tgz

        `readlink images/core-image-sdk-qemux86.ext3`
        `readlink images/core-image-sdk-qemux86.tar.bz2`
        `readlink images/core-image-sato-qemux86.ext3`
        `readlink images/core-image-sato-qemux86.tar.bz2`

        `readlink images/core-image-sdk-qemuarm.ext3`
        `readlink images/core-image-sdk-qemuarm.tar.bz2`
        `readlink images/core-image-sato-qemuarm.ext3`
        `readlink images/core-image-sato-qemuarm.tar.bz2`

        `readlink images/core-image-sdk-qemumips.ext3`
        `readlink images/core-image-sdk-qemumips.tar.bz2`
        `readlink images/core-image-sato-qemumips.ext3`
        `readlink images/core-image-sato-qemumips.tar.bz2`

        `readlink images/core-image-sdk-qemuppc.ext3`
        `readlink images/core-image-sdk-qemuppc.tar.bz2`
        `readlink images/core-image-sato-qemuppc.ext3`
        `readlink images/core-image-sato-qemuppc.tar.bz2`

        yocto-*-toolchain-*.tar.bz2
    )
fi

if [ "x$ABTARGET" = "xyocto-bleeding" ]; then
    COMPRESS_FILES=(
        core-image-sato-qemuarm-*.rootfs.ext2
    )

    FILES=(
        gitinfo
        `readlink images/zImage-akita.bin`
        `readlink images/zImage-qemuarm.bin`
        updater.sh.akita
        core-image-sato-akita-*.rootfs.summary.jffs2
        core-image-sato-qemuarm-*.rootfs.tar.bz2
    )
fi

if [ "x$ABTARGET" = "xyocto-toolchain" ]; then
    FILES=(
        gitinfo
        yocto-*-toolchain-*.tar.bz2
    )
fi

if [ "x$ABTARGET" = "xyocto-full" ]; then
    COMPRESS_FILES=(
        core-image-sdk-qemuarm-*.rootfs.ext2
        core-image-sdk-qemux86-*.rootfs.ext2
        core-image-minimal-qemuarm-*.rootfs.ext2
        core-image-minimal-qemux86-*.rootfs.ext2
        core-image-sato-cd-*.iso
    )

    FILES=(
        gitinfo
        `readlink images/zImage-akita.bin`
        `readlink images/zImage-c7x0.bin`
        `readlink images/zImage-qemuarm.bin`
        `readlink images/zImage-spitz.bin`
        `readlink images/bzImage-qemux86.bin`
        `readlink images/bzImage-atom-pc.bin`
        `readlink images/zImage-htcuniversal.bin`
        `readlink images/zImage-mx31ads.bin`
        `readlink images/zImage-zylonite.bin`
        `readlink images/zImage-cm-x270.bin`
        `readlink images/uImage-em-x270.bin`
        `readlink images/uImage-mx31phy.bin`
        `readlink images/uImage-neo1973-latest.bin`
        updater.sh.akita
        updater.sh.c7x0
        updater.sh.spitz
        gnu-tar
        core-image-live-atom-pc-*.hddimg
        core-image-minimal-live-atom-pc-*.hddimg
        core-image-sato-akita-*.rootfs.summary.jffs2
        core-image-sato-c7x0-*.rootfs.jffs2
        core-image-sato-spitz-*.rootfs.tar.gz
        core-image-sdk-qemuarm-*.rootfs.tar.bz2
        core-image-sdk-qemux86-*.rootfs.tar.bz2
        core-image-minimal-qemuarm-*.rootfs.tar.bz2
        core-image-minimal-qemux86-*.rootfs.tar.bz2
        core-image-sdk-spitz-*.rootfs.tar.gz
        core-image-sato-zylonite-*.rootfs.jffs2
        core-image-sato-cm-x270-*.rootfs.jffs2
        core-image-sato-em-x270-*.rootfs.jffs2
        core-image-sato-htcuniversal-*.rootfs.tar.gz
        core-image-sato-mx31phy-*.jffs2
        core-image-sato-mx31ads-*.jffs2
        `readlink images/updater-em-x270.ext2`
    )
fi

#
# Actually compress and copy the files
#
for FILE in ${FILES[@]}; do
    for FILE2 in `find -name $FILE`; do
        if [ ! -e "$DEST/$FILE2" ]; then
            cp $FILE2 $DEST
        fi
    done
done

for FILE in ${COMPRESS_FILES[@]}; do
    for FILE2 in `find -name $FILE`; do
        if [ ! -e "$DEST/$FILE2.bz2" ]; then
            bzip2 $FILE2
            cp $FILE2.bz2 $DEST
        fi
    done
done

if [ -d ./pstage ]; then
    PSTAGEDEST=$TARGETDIR/$ABTARGET/pstage/
    mkdir -p $PSTAGEDEST
    rsync -av --ignore-existing --exclude=opkg.conf --exclude=stamp-cache-cross --exclude=stamp-cache-staging ./pstage/* $PSTAGEDEST
fi

if [ -d ./ipk ]; then
    IPKDEST=$TARGETDIR/$ABTARGET/ipk/
    mkdir -p $IPKDEST
    rsync -av ./ipk/* $IPKDEST
fi

#
# Touch an images-complete stamp
#
if [ -e ./images/images-complete ]; then
    touch $DEST/complete
fi
chmod a+w -R $DEST 2> /dev/null || true

